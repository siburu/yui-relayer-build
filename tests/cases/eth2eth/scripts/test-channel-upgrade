#!/bin/bash

set -eux

SCRIPT_DIR=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)
FIXTURES_DIR=${SCRIPT_DIR}/../fixtures
source ${SCRIPT_DIR}/util/relayer-util

# back up the original connection identifiers
srcOrigConnectionId=$($RLY paths list --json | jq --raw-output --arg path_name "$PATH_NAME" '.[$path_name].src."connection-id"')
dstOrigConnectionId=$($RLY paths list --json | jq --raw-output --arg path_name "$PATH_NAME" '.[$path_name].dst."connection-id"')

# back up the original config.json and make connection identifiers empty
origconfig=`mktemp`
cp "$RELAYER_CONF/config/config.json" $origconfig
$RLY paths edit $PATH_NAME src connection-id ''
$RLY paths edit $PATH_NAME dst connection-id ''

# create a new connection and save the new connection identifiers
$RLY tx connection $PATH_NAME
srcAltConnectionId=$($RLY paths list --json | jq --raw-output --arg path_name "$PATH_NAME" '.[$path_name].src."connection-id"')
dstAltConnectionId=$($RLY paths list --json | jq --raw-output --arg path_name "$PATH_NAME" '.[$path_name].dst."connection-id"')

# resume the original config.json
mv $origconfig "$RELAYER_CONF/config/config.json"

# constant variables
APP_ADDRESS_A=`cat ${FIXTURES_DIR}/ethereum/ibc0/addresses/IBCChannelUpgradableMockApp`
APP_ADDRESS_B=`cat ${FIXTURES_DIR}/ethereum/ibc1/addresses/IBCChannelUpgradableMockApp`
#TIMEOUT_FLAGS="--timeout-height 0-100000000 --timeout-timestamp `date -d 2030/01/01 +%s`"
TIMEOUT_FLAGS="--timeout-height 0-100000000"

# test channel upgrade (crossing-hello)
UPGRADE_FIELDS_FLAGS_A="--ordering UnOrdered --connection-hops $srcAltConnectionId --version mockapp-999"
UPGRADE_FIELDS_FLAGS_B="--ordering UnOrdered --connection-hops $dstAltConnectionId --version mockapp-999"
$RLY eth upgrade propose ibc01 ibc0 --app-address $APP_ADDRESS_A $UPGRADE_FIELDS_FLAGS_A $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc0 $UPGRADE_FIELDS_FLAGS_A
$RLY eth upgrade propose ibc01 ibc1 --app-address $APP_ADDRESS_B $UPGRADE_FIELDS_FLAGS_B $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc1 $UPGRADE_FIELDS_FLAGS_B
$RLY tx channel-upgrade execute ibc01 --target-src-state FLUSHING --target-dst-state FLUSHING
$RLY eth upgrade allow ibc01 ibc0 --app-address $APP_ADDRESS_A --upgrade-sequence 1
$RLY eth upgrade allow ibc01 ibc1 --app-address $APP_ADDRESS_B --upgrade-sequence 1
$RLY tx channel-upgrade execute ibc01

# test channel upgrade (non-crossing-hello)
UPGRADE_FIELDS_FLAGS_A="--ordering UnOrdered --connection-hops $srcOrigConnectionId --version mockapp-1"
UPGRADE_FIELDS_FLAGS_B="--ordering UnOrdered --connection-hops $dstOrigConnectionId --version mockapp-1"
$RLY eth upgrade propose ibc01 ibc0 --app-address $APP_ADDRESS_A $UPGRADE_FIELDS_FLAGS_A $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc0 $UPGRADE_FIELDS_FLAGS_A
$RLY eth upgrade propose ibc01 ibc0 --app-address $APP_ADDRESS_A $UPGRADE_FIELDS_FLAGS_A $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc0 $UPGRADE_FIELDS_FLAGS_A
$RLY eth upgrade propose ibc01 ibc1 --app-address $APP_ADDRESS_B $UPGRADE_FIELDS_FLAGS_B $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc1 $UPGRADE_FIELDS_FLAGS_B
$RLY tx channel-upgrade execute ibc01 --target-src-state FLUSHING --target-dst-state FLUSHING
$RLY eth upgrade allow ibc01 ibc0 --app-address $APP_ADDRESS_A --upgrade-sequence 3
$RLY eth upgrade allow ibc01 ibc1 --app-address $APP_ADDRESS_B --upgrade-sequence 3
$RLY tx channel-upgrade execute ibc01

# test channel upgrade cancel
UPGRADE_FIELDS_FLAGS_A="--ordering UnOrdered --connection-hops $srcAltConnectionId --version mockapp-999"
UPGRADE_FIELDS_FLAGS_B="--ordering UnOrdered --connection-hops $dstAltConnectionId --version mockapp-999"
$RLY eth upgrade propose ibc01 ibc0 --app-address $APP_ADDRESS_A $UPGRADE_FIELDS_FLAGS_A $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc0 $UPGRADE_FIELDS_FLAGS_A
$RLY eth upgrade propose ibc01 ibc1 --app-address $APP_ADDRESS_B $UPGRADE_FIELDS_FLAGS_B $TIMEOUT_FLAGS
$RLY tx channel-upgrade init ibc01 ibc1 $UPGRADE_FIELDS_FLAGS_B
$RLY tx channel-upgrade cancel ibc01 ibc0  # create situation where ibc0.error_receipt.sequence >= ibc1.channel.upgrade_sequence
$RLY tx channel-upgrade execute ibc01      # the channel upgrade of ibc1 should be cancelled
